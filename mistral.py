import os
import time
import json
from typing import Optional, Dict, Any, List
from mistralai import Mistral
from dataclasses import dataclass, field
from dotenv import load_dotenv


@dataclass
class AgentAction:
    """–î–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç"""

    name: str
    description: str
    parameters: Dict[str, Any] = field(default_factory=dict)


class HiveGardenerAgent:
    def __init__(
        self,
        env_file: str = ".env",
        model: str = "mistral-medium-2505",
        create_agent: bool = False,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ —Å–∞–¥–æ–≤–Ω–∏–∫–∞.

        Args:
            api_key: API –∫–ª—é—á –¥–ª—è Mistral AI
            model: –ú–æ–¥–µ–ª—å Mistral AI –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        load_dotenv(env_file)
        self.api_key = os.getenv("MISTRAL_API_KEY")
        self.agent_id = os.getenv("AGENT_ID")
        if not self.api_key:
            raise ValueError(
                "API –∫–ª—é—á –¥–ª—è Mistral AI –Ω–µ —É–∫–∞–∑–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MISTRAL_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."
            )

        self.client = Mistral(api_key=self.api_key)
        self.model = model
        self.agent = None
        self.conversation_id = None
        self.actions: Dict[str, AgentAction] = {}
        if create_agent:
            self._initialize_agent()
        self._register_default_actions()

        print(f"üåø –ê–≥–µ–Ω—Ç —Å–∞–¥–æ–≤–Ω–∏–∫ –≥–æ—Ç–æ–≤ (–º–æ–¥–µ–ª—å: {model})")

    def _initialize_agent(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Mistral AI"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            agent = self.client.beta.agents.create(
                model=self.model,
                description="–ê–≥–µ–Ω—Ç —Å–∞–¥–æ–≤–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Ä–∞—â–∏–≤–∞–µ—Ç –∂–∏–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–¥–∞",
                name="HiveGardenerAgent",
                instructions=self._get_system_prompt(
                    "TODO: paste our teammate profile"
                ),
                # tools=[{"type": "function"}],  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
                completion_args={
                    "temperature": 0.3,
                    "top_p": 0.95,
                },
            )
            self.agent_id = agent.id
            print(f"ü§ñ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {agent.id}")
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: {str(e)}")

    def _get_system_prompt(self, system: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        return system

    def _register_default_actions(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∞–≥–µ–Ω—Ç–∞"""
        self.register_action(
            name="analyze_hive",
            description="–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–ª—å—è (œÑ, œÜ-–º–µ—Ç—Ä–∏–∫–∏, Œ£)",
            parameters={"depth": "–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ (basic, detailed, full)"},
        )

        self.register_action(
            name="generate_code",
            description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø—á–µ–ª—ã",
            parameters={
                "bee_type": "–¢–∏–ø –ø—á–µ–ª—ã (A, T, C, G)",
                "name": "–ò–º—è –ø—á–µ–ª—ã",
                "invariants": "–°–ø–∏—Å–æ–∫ –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)",
            },
        )

        self.register_action(
            name="refactor_aggregate",
            description="–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∞–≥—Ä–µ–≥–∞—Ç–∞ (A)",
            parameters={
                "aggregate_name": "–ò–º—è –∞–≥—Ä–µ–≥–∞—Ç–∞",
                "issues": "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º (OntoPressure, HiddenCommand –∏ —Ç.–¥.)",
            },
        )

    def register_action(
        self, name: str, description: str, parameters: Dict[str, Any] | None = None
    ):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        self.actions[name] = AgentAction(
            name=name, description=description, parameters=parameters or {}
        )

    def _execute_action(
        self, action_name: str, parameters: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–∞"""
        if action_name not in self.actions:
            raise ValueError(f"–î–µ–π—Å—Ç–≤–∏–µ {action_name} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ")

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ –∫ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if action_name == "analyze_hive":
            depth = parameters.get("depth", "basic")
            analysis = {
                "œÑ": 0.32,
                "œÜ_metrics": {
                    "OntoPressure": 0.1,
                    "HiddenCommand": 0.0,
                    "EmoHook": 0.2,
                },
                "Œ£": 8,
                "recommendations": [
                    "–£–ª–µ–π –≤ –Ω–æ—Ä–º–µ",
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π",
                ],
            }

            if depth == "detailed":
                analysis["code_churn"] = 25
                analysis["event_lag"] = 80
            elif depth == "full":
                analysis["test_coverage"] = 90
                analysis["critical_points"] = []

            return analysis

        elif action_name == "generate_code":
            bee_type = parameters.get("bee_type", "T")
            name = parameters.get("name", "NewBee")
            invariants = parameters.get("invariants", [])

            return {
                "bee_type": bee_type,
                "name": name,
                "invariants": invariants,
                "code_snippet": f"# {name} ({bee_type})\nclass {name}:\n    pass",
                "œÑ_impact": 0.02,
                "Œ£_cost": 1,
            }

        elif action_name == "refactor_aggregate":
            aggregate_name = parameters.get("aggregate_name", "OrderAggregate")
            issues = parameters.get("issues", [])

            return {
                "aggregate_name": aggregate_name,
                "issues_resolved": issues,
                "changes": [
                    f"–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ {aggregate_name} –Ω–∞ {aggregate_name}Header –∏ {aggregate_name}Lines",
                    "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–≤–Ω—ã—Ö –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
                ],
                "œÑ_impact": -0.05,
                "Œ£_cost": 3,
            }

        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action_name}")

    def _get_available_actions(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è LLM"""
        actions_desc = []
        for action in self.actions.values():
            params = ", ".join(f"{k}: {v}" for k, v in action.parameters.items())
            actions_desc.append(
                f"- {action.name}: {action.description} (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params})"
            )

        return "\n".join(actions_desc)

    def _should_execute_action(self, response: str) -> Optional[Dict[str, Any]]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ LLM"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON —Å –¥–µ–π—Å—Ç–≤–∏–µ–º
            action_data = json.loads(response)
            if "action" in action_data and action_data["action"] in self.actions:
                return action_data
        except json.JSONDecodeError:
            pass

        return None

    def execute_conversation(self, user_input: str) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞–≥–µ–Ω—Ç–æ–º.

        Args:
            user_input: –í—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            if not self.conversation_id:
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É
                response = self.client.beta.conversations.start(
                    agent_id=self.agent_id, inputs=user_input
                )
                self.conversation_id = response.conversation_id
            else:
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–µ—Å–µ–¥—É
                response = self.client.beta.conversations.append(
                    conversation_id=self.conversation_id, inputs=user_input
                )

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –±–µ—Å–µ–¥—ã
            conversation_history = self.client.beta.conversations.get_history(
                conversation_id=self.conversation_id
            )
            latest = conversation_history.entries[-1]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
            last_message = str(latest.content)  # type: ignore
            action_data = self._should_execute_action(last_message)

            if action_data:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                action_name = action_data["action"]
                action_params = action_data.get("parameters", {})

                result = self._execute_action(action_name, action_params)

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–µ—Å–µ–¥—É
                result_message = (
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {action_name}: {json.dumps(result)}"
                )
                response = self.client.beta.conversations.append(
                    conversation_id=self.conversation_id, inputs=result_message
                )

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                final_response = f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {action_name}\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{json.dumps(result, indent=2)}"
                return {
                    "response": final_response,
                    "action_executed": action_name,
                    "action_result": result,
                    "metadata": {
                        "model": self.model,
                        "timestamp": time.time(),
                        "conversation_id": self.conversation_id,
                    },
                }
            else:
                # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç LLM
                return {
                    "response": last_message,
                    "metadata": {
                        "model": self.model,
                        "timestamp": time.time(),
                        "conversation_id": self.conversation_id,
                    },
                }

        except Exception as e:
            error_response = f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Mistral AI: {str(e)}"
            return {
                "response": error_response,
                "metadata": {"error": str(e), "timestamp": time.time()},
            }

    def start_interactive_session(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å –∞–≥–µ–Ω—Ç–æ–º"""
        print("\nüåø Hive Gardener Agent —Å Mistral AI v2.0.0")
        print("–í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n")

        while True:
            try:
                user_input = input("> ").strip()
                if user_input.lower() in ["–≤—ã—Ö–æ–¥", "exit", "quit"]:
                    print("üåø –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                    break

                if not user_input:
                    continue

                response = self.execute_conversation(user_input)
                print(f"\n{response['response']}\n")

                # –ï—Å–ª–∏ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ, –≤—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if "action_executed" in response:
                    print(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {response['action_executed']}")
                    print(
                        f"üìà –í–ª–∏—è–Ω–∏–µ –Ω–∞ œÑ: {response['action_result'].get('œÑ_impact', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                    )
                    print(
                        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å Œ£: {response['action_result'].get('Œ£_cost', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                    )

            except KeyboardInterrupt:
                print("\nüåø –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                break
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    # 1. –° —É–∫–∞–∑–∞–Ω–∏–µ–º API –∫–ª—é—á–∞
    # agent = HiveGardenerAgent(api_key="–≤–∞—à_api_–∫–ª—é—á")

    # 2. –ß–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
    # export MISTRAL_API_KEY="–≤–∞—à_api_–∫–ª—é—á"
    # agent = HiveGardenerAgent()

    # 3. –° —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    # agent = HiveGardenerAgent(model="mistral-small-latest")

    # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç MISTRAL_API_KEY –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    agent = HiveGardenerAgent()
    agent.start_interactive_session()
