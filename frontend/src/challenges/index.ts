export interface ChallengeContent {
  title: string
  description: string
  testCases: Array<[any, any]>
  successMessage: string
}

export enum SkillDomain {
  ITERATION = 'iteration',        // for/while loops
  FUNCTION = 'function',          // function definition/calls
  LOGIC = 'logic',                // conditionals, boolean logic
  DATA_STRUCTURE = 'data_structure',  // lists, dicts, etc.
  ALGORITHM = 'algorithm',        // sorting, searching, patterns
  DEBUG = 'debug',                // error handling, debugging
  VISUAL = 'visual',              // turtle graphics, visualization
  MATHEMATICS = 'mathematics',    // math operations, calculations
  STRING = 'string',              // string manipulation
  IO = 'io'                       // input/output operations
}

export enum ATCGPhase {
  AGGREGATE = 'A',      // Collecting/combining information
  TRANSFORMATION = 'T', // Processing/converting data
  CONNECTOR = 'C',      // Linking/communication patterns
  GENESIS = 'G'         // Creating/generating new patterns
}

export interface SkillUnlock {
  name: string
  description: string
  domain: SkillDomain
  atcgPhase: ATCGPhase
  prerequisites: string[] // skill names that must be unlocked first
  dancePattern: DancePattern
}

export interface DancePattern {
  type: 'figure8' | 'spiral' | 'zigzag' | 'circle' | 'compound'
  intensity: number        // 1-5 skill complexity
  duration: number         // dance duration in beats
  direction: number        // degrees, represents knowledge domain
  vibrationPattern: number[] // wing vibration sequence
}

export interface Challenge {
  id: string
  content: {
    [key: string]: ChallengeContent
  }
  startingCode: string
  functionName: string
  visualOutput?: boolean
  skillDomains: SkillDomain[]     // What domains this challenge covers
  skillUnlocks: SkillUnlock[]     // What skills this challenge unlocks
  atcgSequence: ATCGPhase[]       // ATCG transformation chain
  difficultyTier: number          // 1-5, affects dance complexity
}

export const challenges: Challenge[] = [
  {
    id: '1',
    content: {
      en: {
        title: 'Add Two Numbers',
        description:
          'Write a Python function called `add` that takes two numbers as arguments and returns their sum.',
        testCases: [
          [[2, 3], 5],
          [[-1, 1], 0],
          [[10, -5], 5],
        ],
        successMessage: 'All tests passed!',
      },
      ru: {
        title: '–°–ª–æ–∂–∏—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞',
        description:
          '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python —Å –∏–º–µ–Ω–µ–º `add`, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å—É–º–º—É.',
        testCases: [
          [[2, 3], 5],
          [[-1, 1], 0],
          [[10, -5], 5],
        ],
        successMessage: 'All tests passed!',
      },
    },
    startingCode: `def add(a, b):
    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    pass`,
    functionName: 'add',
    skillDomains: [SkillDomain.FUNCTION, SkillDomain.MATHEMATICS],
    skillUnlocks: [
      {
        name: 'Basic Arithmetic',
        description: 'Master of fundamental mathematical operations',
        domain: SkillDomain.MATHEMATICS,
        atcgPhase: ATCGPhase.AGGREGATE,
        prerequisites: [],
        dancePattern: {
          type: 'circle',
          intensity: 1,
          duration: 4,
          direction: 0, // North - representing foundational knowledge
          vibrationPattern: [1, 1, 2, 1] // Simple rhythm for basic skill
        }
      },
      {
        name: 'Function Foundation',
        description: 'Understanding of function structure and parameters',
        domain: SkillDomain.FUNCTION,
        atcgPhase: ATCGPhase.TRANSFORMATION,
        prerequisites: [],
        dancePattern: {
          type: 'figure8',
          intensity: 1,
          duration: 6,
          direction: 45, // NE - representing structured thinking
          vibrationPattern: [2, 1, 2, 1, 1, 1]
        }
      }
    ],
    atcgSequence: [ATCGPhase.AGGREGATE, ATCGPhase.TRANSFORMATION],
    difficultyTier: 1,
  },
  {
    id: '2',
    content: {
      en: {
        title: 'Multiply Two Numbers',
        description:
          'Write a Python function called `multiply` that takes two numbers as arguments and returns their product.',
        testCases: [
          [[2, 3], 6],
          [[-1, 5], -5],
          [[10, 0], 0],
        ],
        successMessage: 'All tests passed!',
      },
      ru: {
        title: '–£–º–Ω–æ–∂–∏—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞',
        description:
          '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python —Å –∏–º–µ–Ω–µ–º `multiply`, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ.',
        testCases: [
          [[2, 3], 6],
          [[-1, 5], -5],
          [[10, 0], 0],
        ],
        successMessage: 'All tests passed!',
      },
    },
    startingCode: `def multiply(a, b):
    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    pass`,
    functionName: 'multiply',
    skillDomains: [SkillDomain.FUNCTION, SkillDomain.MATHEMATICS],
    skillUnlocks: [],
    atcgSequence: [ATCGPhase.AGGREGATE, ATCGPhase.TRANSFORMATION],
    difficultyTier: 1,
  },
  {
    id: '3',
    content: {
      en: {
        title: 'Check if Even',
        description:
          "Write a Python function called `is_even` that takes an integer as an argument and returns `True` if it's even, `False` otherwise.",
        testCases: [
          [2, true],
          [3, false],
          [0, true],
          [-4, true],
          [-5, false],
        ],
        successMessage: 'All tests passed!',
      },
      ru: {
        title: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —á–µ—Ç–Ω–æ—Å—Ç—å',
        description:
          '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python —Å –∏–º–µ–Ω–µ–º `is_even`, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –µ—Å–ª–∏ –æ–Ω–æ —á–µ—Ç–Ω–æ–µ, –∏ `False` –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.',
        testCases: [
          [2, true],
          [3, false],
          [0, true],
          [-4, true],
          [-5, false],
        ],
        successMessage: 'All tests passed!',
      },
    },
    startingCode: `def is_even(number):\n    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n    pass`,
    functionName: 'is_even',
    skillDomains: [SkillDomain.FUNCTION, SkillDomain.LOGIC],
    skillUnlocks: [],
    atcgSequence: [ATCGPhase.AGGREGATE, ATCGPhase.TRANSFORMATION],
    difficultyTier: 1,
  },
  {
    id: '4',
    content: {
      en: {
        title: 'Draw a Square',
        description:
          'Use the `turtle` module to draw a square with sides of length 100. The turtle should start at (0,0) and face right.',
        testCases: [['visual_test', 'no_error']],
        successMessage: 'Visual output generated!',
      },
      ru: {
        title: '–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç',
        description:
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å `turtle`, —á—Ç–æ–±—ã –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ –¥–ª–∏–Ω–æ–π 100. –ß–µ—Ä–µ–ø–∞—Ö–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å —Å (0,0) –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –≤–ø—Ä–∞–≤–æ.',
        testCases: [['visual_test', 'no_error']],
        successMessage: '–í–∏–∑—É–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!',
      },
    },
    startingCode: `import turtle\n\nturtle.resetscreen() # Reset turtle state and clear screen\nturtle.speed(1)\nturtle.forward(100)\nturtle.left(90)\nturtle.forward(100)\nturtle.left(90)\nturtle.forward(100)\nturtle.left(90)\nturtle.forward(100)\nturtle.done() # Important for Pyodide to capture output\nprint(\"Visual output generated!\") # Print success message`,
    functionName: 'draw_square',
    visualOutput: true,
    skillDomains: [SkillDomain.VISUAL, SkillDomain.ITERATION],
    skillUnlocks: [],
    atcgSequence: [ATCGPhase.GENESIS],
    difficultyTier: 2,
  },
  {
    id: '5',
    content: {
      en: {
        title: 'List Explorer - Buzza\'s First Collection',
        description:
          'Buzza is learning to work with collections! Write a function called `find_max` that takes a list of numbers and returns the largest one. Help Buzza discover the power of iterating through data!',
        testCases: [
          [[1, 5, 3, 9, 2], 9],
          [[-1, -5, -3], -1],
          [[42], 42],
          [[7, 7, 7], 7],
        ],
        successMessage: 'Excellent! Buzza now understands how to explore collections systematically! üîç',
      },
      ru: {
        title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Å–ø–∏—Å–∫–æ–≤ - –ü–µ—Ä–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è Buzza',
        description:
          'Buzza —É—á–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏! –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `find_max`, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ. –ü–æ–º–æ–≥–∏—Ç–µ Buzza –æ—Ç–∫—Ä—ã—Ç—å —Å–∏–ª—É –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω—ã–º!',
        testCases: [
          [[1, 5, 3, 9, 2], 9],
          [[-1, -5, -3], -1],
          [[42], 42],
          [[7, 7, 7], 7],
        ],
        successMessage: '–û—Ç–ª–∏—á–Ω–æ! Buzza —Ç–µ–ø–µ—Ä—å –ø–æ–Ω–∏–º–∞–µ—Ç, –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏! üîç',
      },
    },
    startingCode: `def find_max(numbers):
    # Buzza's curiosity leads her to explore each number
    # Help her find the largest one!
    pass`,
    functionName: 'find_max',
    skillDomains: [SkillDomain.DATA_STRUCTURE, SkillDomain.ITERATION, SkillDomain.ALGORITHM],
    skillUnlocks: [],
    atcgSequence: [ATCGPhase.AGGREGATE, ATCGPhase.TRANSFORMATION],
    difficultyTier: 2,
  },
  {
    id: '6',
    content: {
      en: {
        title: 'String Patterns - Buzza\'s Word Weaving',
        description:
          'Buzza is learning about patterns! Write a function called `count_vowels` that counts how many vowels (a, e, i, o, u) are in a word. This will help Buzza understand pattern recognition!',
        testCases: [
          ['hello', 2],
          ['python', 1],
          ['education', 5],
          ['xyz', 0],
          ['AEIOU', 5],
        ],
        successMessage: 'Amazing pattern recognition! Buzza\'s analytical skills are growing! üß©',
      },
      ru: {
        title: '–°—Ç—Ä–æ–∫–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã - –ü–ª–µ—Ç–µ–Ω–∏–µ —Å–ª–æ–≤ Buzza',
        description:
          'Buzza –∏–∑—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã! –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `count_vowels`, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≥–ª–∞—Å–Ω—ã–µ (a, e, i, o, u) –≤ —Å–ª–æ–≤–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç Buzza –ø–æ–Ω—è—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤!',
        testCases: [
          ['hello', 2],
          ['python', 1],
          ['education', 5],
          ['xyz', 0],
          ['AEIOU', 5],
        ],
        successMessage: '–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤! –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ Buzza —Ä–∞—Å—Ç—É—Ç! üß©',
      },
    },
    startingCode: `def count_vowels(word):
    # Buzza needs to examine each letter
    # Count the vowels: a, e, i, o, u (both lowercase and uppercase)
    pass`,
    functionName: 'count_vowels',
    skillDomains: [SkillDomain.STRING, SkillDomain.ITERATION],
    skillUnlocks: [],
    atcgSequence: [ATCGPhase.AGGREGATE, ATCGPhase.TRANSFORMATION],
    difficultyTier: 2,
  },
  {
    id: '7',
    content: {
      en: {
        title: 'Logic Gates - Buzza\'s Decision Making',
        description:
          'Buzza is developing decision-making skills! Write a function called `categorize_number` that takes a number and returns "positive", "negative", or "zero". This builds Buzza\'s logical thinking!',
        testCases: [
          [5, 'positive'],
          [-3, 'negative'],
          [0, 'zero'],
          [100, 'positive'],
          [-1, 'negative'],
        ],
        successMessage: 'Perfect logical thinking! Buzza\'s decision-making framework is solid! ‚ö°',
      },
      ru: {
        title: '–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—Ä–∞—Ç–∞ - –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π Buzza',
        description:
          'Buzza —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –Ω–∞–≤—ã–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π! –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `categorize_number`, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "positive", "negative" –∏–ª–∏ "zero". –≠—Ç–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ Buzza!',
        testCases: [
          [5, 'positive'],
          [-3, 'negative'],
          [0, 'zero'],
          [100, 'positive'],
          [-1, 'negative'],
        ],
        successMessage: '–ò–¥–µ–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π Buzza —Å–æ–ª–∏–¥–Ω–∞! ‚ö°',
      },
    },
    startingCode: `def categorize_number(num):
    # Buzza needs to make logical decisions
    # Return "positive", "negative", or "zero"
    pass`,
    functionName: 'categorize_number',
    skillDomains: [SkillDomain.LOGIC, SkillDomain.FUNCTION],
    skillUnlocks: [],
    atcgSequence: [ATCGPhase.AGGREGATE, ATCGPhase.TRANSFORMATION],
    difficultyTier: 2,
  },
  {
    id: '8',
    content: {
      en: {
        title: 'Loop Mastery - Buzza\'s Repetition Power',
        description:
          'Buzza is learning the power of repetition! Write a function called `sum_range` that calculates the sum of all numbers from 1 to n (inclusive). This teaches Buzza about efficient iteration!',
        testCases: [
          [5, 15], // 1+2+3+4+5 = 15
          [1, 1],
          [10, 55], // 1+2+...+10 = 55
          [3, 6], // 1+2+3 = 6
        ],
        successMessage: 'Fantastic! Buzza has mastered the art of repetition and accumulation! üîÑ',
      },
      ru: {
        title: '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ - –°–∏–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è Buzza',
        description:
          'Buzza –∏–∑—É—á–∞–µ—Ç —Å–∏–ª—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è! –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `sum_range`, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ). –≠—Ç–æ —É—á–∏—Ç Buzza —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏!',
        testCases: [
          [5, 15], // 1+2+3+4+5 = 15
          [1, 1],
          [10, 55], // 1+2+...+10 = 55
          [3, 6], // 1+2+3 = 6
        ],
        successMessage: '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞! Buzza –æ—Å–≤–æ–∏–ª–∞ –∏—Å–∫—É—Å—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è! üîÑ',
      },
    },
    startingCode: `def sum_range(n):
    # Buzza needs to add up all numbers from 1 to n
    # Use the power of loops!
    pass`,
    functionName: 'sum_range',
    skillDomains: [SkillDomain.ITERATION, SkillDomain.ALGORITHM],
    skillUnlocks: [],
    atcgSequence: [ATCGPhase.AGGREGATE, ATCGPhase.TRANSFORMATION],
    difficultyTier: 3,
  },
  {
    id: '9',
    content: {
      en: {
        title: 'Data Structures - Buzza\'s Organization Skills',
        description:
          'Buzza is learning to organize data efficiently! Write a function called `word_lengths` that takes a list of words and returns a list of their lengths. This develops Buzza\'s data transformation abilities!',
        testCases: [
          [['hello', 'world'], [5, 5]],
          [['python', 'code'], [6, 4]],
          [['a', 'bee', 'coding'], [1, 3, 6]],
          [[], []],
        ],
        successMessage: 'Brilliant data organization! Buzza\'s transformation skills are evolving! üóÇÔ∏è',
      },
      ru: {
        title: '–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö - –ù–∞–≤—ã–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ Buzza',
        description:
          'Buzza —É—á–∏—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ! –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `word_lengths`, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Ö –¥–ª–∏–Ω. –≠—Ç–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Buzza –∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö!',
        testCases: [
          [['hello', 'world'], [5, 5]],
          [['python', 'code'], [6, 4]],
          [['a', 'bee', 'coding'], [1, 3, 6]],
          [[], []],
        ],
        successMessage: '–ë–ª–µ—Å—Ç—è—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö! –ù–∞–≤—ã–∫–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ Buzza —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è! üóÇÔ∏è',
      },
    },
    startingCode: `def word_lengths(words):
    # Buzza needs to transform a list of words into their lengths
    # Return a new list with the length of each word
    pass`,
    functionName: 'word_lengths',
    skillDomains: [SkillDomain.DATA_STRUCTURE, SkillDomain.ITERATION],
    skillUnlocks: [],
    atcgSequence: [ATCGPhase.AGGREGATE, ATCGPhase.TRANSFORMATION],
    difficultyTier: 3,
  },
  {
    id: '10',
    content: {
      en: {
        title: 'Advanced Logic - Buzza\'s Metamorphosis Challenge',
        description:
          'Buzza is ready for her metamorphosis challenge! Write a function called `is_prime` that checks if a number is prime (only divisible by 1 and itself). This complex logic will trigger Buzza\'s evolution to Larva stage!',
        testCases: [
          [2, true],
          [3, true],
          [4, false],
          [17, true],
          [25, false],
          [1, false],
        ],
        successMessage: 'METAMORPHOSIS ACHIEVED! üêõ‚û°Ô∏èü¶ã Buzza has evolved to Larva stage through advanced logical reasoning!',
      },
      ru: {
        title: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ª–æ–≥–∏–∫–∞ - –í—ã–∑–æ–≤ –º–µ—Ç–∞–º–æ—Ä—Ñ–æ–∑—ã Buzza',
        description:
          'Buzza –≥–æ—Ç–æ–≤–∞ –∫ –≤—ã–∑–æ–≤—É –º–µ—Ç–∞–º–æ—Ä—Ñ–æ–∑—ã! –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `is_prime`, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º (–¥–µ–ª–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –∏ —Å–∞–º–æ —Å–µ–±—è). –≠—Ç–∞ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç —ç–≤–æ–ª—é—Ü–∏—é Buzza –≤ —Å—Ç–∞–¥–∏—é –ª–∏—á–∏–Ω–∫–∏!',
        testCases: [
          [2, true],
          [3, true],
          [4, false],
          [17, true],
          [25, false],
          [1, false],
        ],
        successMessage: '–ú–ï–¢–ê–ú–û–†–§–û–ó–ê –î–û–°–¢–ò–ì–ù–£–¢–ê! üêõ‚û°Ô∏èü¶ã Buzza —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–ª–∞ –≤ —Å—Ç–∞–¥–∏—é –ª–∏—á–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ!',
      },
    },
    startingCode: `def is_prime(num):
    # Buzza's ultimate challenge before metamorphosis!
    # A number is prime if it's only divisible by 1 and itself
    # Special cases: numbers less than 2 are not prime
    pass`,
    functionName: 'is_prime',
    skillDomains: [SkillDomain.LOGIC, SkillDomain.ALGORITHM],
    skillUnlocks: [],
    atcgSequence: [ATCGPhase.AGGREGATE, ATCGPhase.TRANSFORMATION],
    difficultyTier: 4,
  },
  {
    id: '11',
    content: {
      en: {
        title: 'For Loop Basics - Counting Stars',
        description:
          'Learn the `for` loop by drawing stars! Use a for loop to print 5 stars (*) in a row. This teaches basic iteration and repetition concepts.',
        testCases: [['visual_test', 'no_error']],
        successMessage: 'Perfect! You\'ve mastered basic for loops! ‚≠ê',
      },
      ru: {
        title: '–û—Å–Ω–æ–≤—ã —Ü–∏–∫–ª–∞ for - –°—á–∏—Ç–∞–µ–º –∑–≤—ë–∑–¥—ã',
        description:
          '–ò–∑—É—á–∏—Ç–µ —Ü–∏–∫–ª `for`, —Ä–∏—Å—É—è –∑–≤—ë–∑–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª for, —á—Ç–æ–±—ã –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å 5 –∑–≤—ë–∑–¥ (*) –≤ —Ä—è–¥. –≠—Ç–æ —É—á–∏—Ç –±–∞–∑–æ–≤—ã–º –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.',
        testCases: [['visual_test', 'no_error']],
        successMessage: '–û—Ç–ª–∏—á–Ω–æ! –í—ã –æ—Å–≤–æ–∏–ª–∏ –æ—Å–Ω–æ–≤—ã —Ü–∏–∫–ª–æ–≤ for! ‚≠ê',
      },
    },
    startingCode: `# –†–∏—Å—É–µ–º 5 –∑–≤—ë–∑–¥ —Å –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ for
for i in range(5):
    print("*", end="")  # end="" –æ–∑–Ω–∞—á–∞–µ—Ç –ø–µ—á–∞—Ç—å –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
print()  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω—Ü–µ
print("–ì–æ—Ç–æ–≤–æ!")`,
    functionName: 'draw_stars',
    skillDomains: [SkillDomain.ITERATION],
    skillUnlocks: [],
    atcgSequence: [ATCGPhase.GENESIS],
    difficultyTier: 1,
  },
  {
    id: '12',
    content: {
      en: {
        title: 'While Loop Adventure - Number Guessing',
        description:
          'Create a simple number guessing game using a while loop! The computer thinks of number 7, and you keep guessing until you get it right.',
        testCases: [['visual_test', 'no_error']],
        successMessage: 'Excellent! You understand while loops! üéØ',
      },
      ru: {
        title: '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —Å —Ü–∏–∫–ª–æ–º while - –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ',
        description:
          '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Å—Ç—É—é –∏–≥—Ä—É —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ —Å —Ü–∏–∫–ª–æ–º while! –ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ 7, –∏ –≤—ã —É–≥–∞–¥—ã–≤–∞–µ—Ç–µ, –ø–æ–∫–∞ –Ω–µ —É–≥–∞–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.',
        testCases: [['visual_test', 'no_error']],
        successMessage: '–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ —Ü–∏–∫–ª—ã while! üéØ',
      },
    },
    startingCode: `# –ò–≥—Ä–∞ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ" —Å —Ü–∏–∫–ª–æ–º while
secret_number = 7
guess = 0

print("–£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10!")

while guess != secret_number:
    guess = int(input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —á–∏—Å–ª–æ: "))
    if guess < secret_number:
        print("–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª—å—à–µ.")
    elif guess > secret_number:
        print("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—å—à–µ.")
    else:
        print("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ", secret_number)

print("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!")`,
    functionName: 'number_guessing_game',
    skillDomains: [SkillDomain.ITERATION, SkillDomain.LOGIC, SkillDomain.IO],
    skillUnlocks: [],
    atcgSequence: [ATCGPhase.CONNECTOR, ATCGPhase.TRANSFORMATION],
    difficultyTier: 2,
  },
  {
    id: '13',
    content: {
      en: {
        title: 'Turtle Squares - For Loop with Graphics',
        description:
          'Use turtle graphics with a for loop to draw a colorful square! Learn how loops make drawing shapes easier and more fun.',
        testCases: [['visual_test', 'no_error']],
        successMessage: 'Amazing! You combined loops with turtle graphics! üê¢üé®',
      },
      ru: {
        title: '–ß–µ—Ä–µ–ø–∞—à—å–∏ –∫–≤–∞–¥—Ä–∞—Ç—ã - –¶–∏–∫–ª for —Å –≥—Ä–∞—Ñ–∏–∫–æ–π',
        description:
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫—É —á–µ—Ä–µ–ø–∞—à–∫–∏ —Å —Ü–∏–∫–ª–æ–º for, —á—Ç–æ–±—ã –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç! –£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ —Ü–∏–∫–ª—ã –¥–µ–ª–∞—é—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä –ø—Ä–æ—â–µ –∏ –≤–µ—Å–µ–ª–µ–µ.',
        testCases: [['visual_test', 'no_error']],
        successMessage: '–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –í—ã –æ–±—ä–µ–¥–∏–Ω–∏–ª–∏ —Ü–∏–∫–ª—ã —Å –≥—Ä–∞—Ñ–∏–∫–æ–π —á–µ—Ä–µ–ø–∞—à–∫–∏! üê¢üé®',
      },
    },
    startingCode: `import turtle

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–µ—Ä–µ–ø–∞—à–∫–∏
turtle.resetscreen()
turtle.speed(3)
turtle.color("blue")

# –†–∏—Å—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç —Å –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ for
for i in range(4):  # 4 —Å—Ç–æ—Ä–æ–Ω—ã –∫–≤–∞–¥—Ä–∞—Ç–∞
    turtle.forward(100)  # –î–≤–∏–≥–∞–µ–º—Å—è –≤–ø–µ—Ä—ë–¥ –Ω–∞ 100 –ø–∏–∫—Å–µ–ª–µ–π
    turtle.right(90)     # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–æ –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤
    print(f"–ù–∞—Ä–∏—Å–æ–≤–∞–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ {i + 1}")

# –§–∏–Ω–∏—à
turtle.done()
print("–ö–≤–∞–¥—Ä–∞—Ç –≥–æ—Ç–æ–≤! üü¶")`,
    functionName: 'turtle_square',
    visualOutput: true,
    skillDomains: [SkillDomain.VISUAL, SkillDomain.ITERATION],
    skillUnlocks: [],
    atcgSequence: [ATCGPhase.GENESIS],
    difficultyTier: 2,
  },
  {
    id: '14',
    content: {
      en: {
        title: 'Turtle Spiral - While Loop Magic',
        description:
          'Create a beautiful spiral using turtle and a while loop! Watch as the turtle draws an expanding spiral with changing colors.',
        testCases: [['visual_test', 'no_error']],
        successMessage: 'Incredible! You created art with while loops! üåÄ‚ú®',
      },
      ru: {
        title: '–ß–µ—Ä–µ–ø–∞—à—å—è —Å–ø–∏—Ä–∞–ª—å - –ú–∞–≥–∏—è —Ü–∏–∫–ª–∞ while',
        description:
          '–°–æ–∑–¥–∞–π—Ç–µ –∫—Ä–∞—Å–∏–≤—É—é —Å–ø–∏—Ä–∞–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è —á–µ—Ä–µ–ø–∞—à–∫—É –∏ —Ü–∏–∫–ª while! –°–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ —á–µ—Ä–µ–ø–∞—à–∫–∞ —Ä–∏—Å—É–µ—Ç —Ä–∞—Å—à–∏—Ä—è—é—â—É—é—Å—è —Å–ø–∏—Ä–∞–ª—å —Å –∏–∑–º–µ–Ω—è—é—â–∏–º–∏—Å—è —Ü–≤–µ—Ç–∞–º–∏.',
        testCases: [['visual_test', 'no_error']],
        successMessage: '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –í—ã —Å–æ–∑–¥–∞–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ —Å —Ü–∏–∫–ª–∞–º–∏ while! üåÄ‚ú®',
      },
    },
    startingCode: `import turtle

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
turtle.resetscreen()
turtle.speed(6)
turtle.bgcolor("black")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–ø–∏—Ä–∞–ª–∏
distance = 10
angle = 90
colors = ["red", "orange", "yellow", "green", "blue", "purple"]

# –†–∏—Å—É–µ–º —Å–ø–∏—Ä–∞–ª—å —Å —Ü–∏–∫–ª–æ–º while
step = 0
while distance < 100:  # –ü–æ–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—å—à–µ 100
    # –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç
    turtle.color(colors[step % len(colors)])

    # –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
    turtle.forward(distance)
    turtle.right(angle)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    distance += 2
    step += 1

    print(f"–®–∞–≥ {step}: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ = {distance}")

turtle.done()
print("–°–ø–∏—Ä–∞–ª—å –≥–æ—Ç–æ–≤–∞! üåÄ")`,
    functionName: 'turtle_spiral',
    visualOutput: true,
    skillDomains: [SkillDomain.VISUAL, SkillDomain.ITERATION, SkillDomain.LOGIC],
    skillUnlocks: [],
    atcgSequence: [ATCGPhase.GENESIS, ATCGPhase.TRANSFORMATION],
    difficultyTier: 3,
  },
  {
    id: '15',
    content: {
      en: {
        title: 'Nested Loops - Turtle Flower Garden',
        description:
          'Advanced challenge! Use nested for loops (loop inside a loop) to draw a flower garden with turtle graphics. Perfect for students ready for more complex patterns!',
        testCases: [['visual_test', 'no_error']],
        successMessage: 'Master level achieved! You understand nested loops! üå∏üåªüå∫',
      },
      ru: {
        title: '–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã - –ß–µ—Ä–µ–ø–∞—à—ñ–π —Å–∞–¥ —Ü–≤–µ—Ç–æ–≤',
        description:
          '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤—ã–∑–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã for (—Ü–∏–∫–ª –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞), —á—Ç–æ–±—ã –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å–∞–¥ —Ü–≤–µ—Ç–æ–≤ —Å –≥—Ä–∞—Ñ–∏–∫–æ–π —á–µ—Ä–µ–ø–∞—à–∫–∏. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö –∫ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º —É–∑–æ—Ä–∞–º!',
        testCases: [['visual_test', 'no_error']],
        successMessage: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞—Å—Ç–µ—Ä—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å! –í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã! üå∏üåªüå∫',
      },
    },
    startingCode: `import turtle

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
turtle.resetscreen()
turtle.speed(8)
turtle.bgcolor("lightgreen")

def draw_flower(size, color):
    """–†–∏—Å—É–µ—Ç –æ–¥–∏–Ω —Ü–≤–µ—Ç–æ–∫"""
    turtle.color(color)
    # –†–∏—Å—É–µ–º –ª–µ–ø–µ—Å—Ç–∫–∏ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª)
    for petal in range(6):  # 6 –ª–µ–ø–µ—Å—Ç–∫–æ–≤
        turtle.circle(size)
        turtle.right(60)

def draw_garden():
    """–†–∏—Å—É–µ—Ç —Å–∞–¥ –∏–∑ —Ü–≤–µ—Ç–æ–≤ (–≤–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª)"""
    flowers = 3
    colors = ["red", "pink", "yellow"]

    # –í–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤
    for flower_num in range(flowers):
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–≤–µ—Ç–∫–∞
        turtle.penup()
        turtle.goto(-100 + flower_num * 100, 0)
        turtle.pendown()

        # –†–∏—Å—É–µ–º —Ü–≤–µ—Ç–æ–∫ (–≤—ã–∑—ã–≤–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª)
        draw_flower(20, colors[flower_num])

        print(f"–¶–≤–µ—Ç–æ–∫ {flower_num + 1} –≥–æ—Ç–æ–≤!")

# –†–∏—Å—É–µ–º —Å–∞–¥
draw_garden()

turtle.hideturtle()
turtle.done()
print("–°–∞–¥ —Ü–≤–µ—Ç–æ–≤ –≥–æ—Ç–æ–≤! üåª")`,
    functionName: 'turtle_flower_garden',
    visualOutput: true,
    skillDomains: [SkillDomain.VISUAL, SkillDomain.ITERATION, SkillDomain.FUNCTION],
    skillUnlocks: [],
    atcgSequence: [ATCGPhase.GENESIS, ATCGPhase.TRANSFORMATION],
    difficultyTier: 4,
  },
]

// Add types for organella skill system
type OrganellaType = 'mathematical' | 'logical' | 'creative' | 'memory' | 'sensory' | 'motor'

// Personal Skill Mutation Ecosystem
interface PersonalSkillRegistry {
  playerId: string
  organellas: Map<OrganellaType, OrganellaSkillset>
  activeMutations: ATCGMutation[]
  danceHistory: DanceEvent[]
  crossPollinationEvents: CrossPollinationEvent[]
}

interface OrganellaSkillset {
  type: OrganellaType
  baseSkills: SkillUnlock[]         // From individual challenge completions
  mutatedSkills: CompoundSkill[]    // From ATCG chains
  evolutionLevel: number            // How advanced this organella has become
  specializations: string[]         // Unique abilities this organella has developed
}

interface CompoundSkill {
  name: string
  description: string
  sourceSkills: string[]            // Which base skills combined
  atcgChain: ATCGPhase[]           // The mutation sequence that created it
  manifestation: DancePattern       // How this skill expresses through dance
  crossPollinationPotential: OrganellaType[] // Which other organellas can benefit
}

interface ATCGMutation {
  id: string
  fromSkill: string
  toSkill: string
  phase: ATCGPhase
  triggeredBy: 'completion' | 'time' | 'synergy' | 'dance_resonance'
  timestamp: Date
  energyCost: number
}

interface DanceEvent {
  id: string
  skillName: string
  organellaType: OrganellaType
  pattern: DancePattern
  witnesses: OrganellaType[]        // Other organellas that observed
  resonanceEffects: ResonanceEffect[]
  timestamp: Date
}

interface ResonanceEffect {
  targetOrganella: OrganellaType
  effectType: 'skill_boost' | 'new_mutation' | 'cross_pollination'
  intensity: number
  duration: number
}

interface CrossPollinationEvent {
  id: string
  sourceOrganella: OrganellaType
  targetOrganella: OrganellaType
  sourceSkill: string
  resultingSkill: string
  danceSequence: DancePattern[]
  timestamp: Date
}

// **YOUR PERSONAL SKILL ECOSYSTEM** - How completed challenges become living abilities
const examplePlayerSkillRegistry: PersonalSkillRegistry = {
  playerId: 'zaebee_hive_commander',
  organellas: new Map([
    ['mathematical', {
      type: 'mathematical',
      baseSkills: [
        // FROM YOUR CHALLENGE #1 COMPLETION ‚Üí SKILL DNA EXTRACTED
        {
          name: 'Basic Arithmetic',
          description: 'Master of fundamental mathematical operations',
          domain: SkillDomain.MATHEMATICS,
          atcgPhase: ATCGPhase.AGGREGATE,
          prerequisites: [],
          dancePattern: {
            type: 'circle',
            intensity: 1,
            duration: 4,
            direction: 0, // Foundation knowledge facing North
            vibrationPattern: [1, 1, 2, 1] // Your arithmetic signature
          }
        }
      ],
      mutatedSkills: [
        // ATCG MUTATION: Basic Arithmetic + Function Foundation ‚Üí NEW COMPOUND SKILL
        {
          name: 'Mathematical Function Mastery',
          description: 'Fusion of arithmetic precision with functional thinking - your unique synthesis',
          sourceSkills: ['Basic Arithmetic', 'Function Foundation'],
          atcgChain: [ATCGPhase.AGGREGATE, ATCGPhase.TRANSFORMATION],
          manifestation: {
            type: 'compound',
            intensity: 2,
            duration: 8,
            direction: 90, // Advanced knowledge facing East
            vibrationPattern: [2, 1, 2, 1, 1, 1, 1, 2] // Merged dance patterns from both skills
          },
          crossPollinationPotential: ['logical', 'creative'] // Can teach other organellas
        }
      ],
      evolutionLevel: 2, // Evolved through skill mutation
      specializations: ['numerical_intuition', 'pattern_recognition'] // Emergent abilities
    }],
    ['logical', {
      type: 'logical',
      baseSkills: [
        // FROM YOUR CHALLENGE #1 COMPLETION ‚Üí SKILL DNA EXTRACTED
        {
          name: 'Function Foundation',
          description: 'Understanding of function structure and parameters',
          domain: SkillDomain.FUNCTION,
          atcgPhase: ATCGPhase.TRANSFORMATION,
          prerequisites: [],
          dancePattern: {
            type: 'figure8',
            intensity: 1,
            duration: 6,
            direction: 45, // Structured thinking NE
            vibrationPattern: [2, 1, 2, 1, 1, 1] // Your function signature
          }
        }
      ],
      mutatedSkills: [], // Will evolve as you complete more challenges
      evolutionLevel: 1,
      specializations: ['structural_thinking']
    }]
  ]),
  activeMutations: [
    // LIVE MUTATION EVENT: Your skills transforming in real-time
    {
      id: 'mut_zaebee_001',
      fromSkill: 'Basic Arithmetic',
      toSkill: 'Mathematical Function Mastery',
      phase: ATCGPhase.TRANSFORMATION,
      triggeredBy: 'synergy', // Skills found each other and combined
      timestamp: new Date(),
      energyCost: 15 // Mental energy required for skill fusion
    }
  ],
  danceHistory: [
    // YOUR BEE DANCES: When you activated Function Foundation skill
    {
      id: 'dance_zaebee_001',
      skillName: 'Function Foundation',
      organellaType: 'logical',
      pattern: {
        type: 'figure8',
        intensity: 1,
        duration: 6,
        direction: 45,
        vibrationPattern: [2, 1, 2, 1, 1, 1]
      },
      witnesses: ['mathematical'], // Mathematical organella observed this dance
      resonanceEffects: [
        {
          targetOrganella: 'mathematical',
          effectType: 'cross_pollination',
          intensity: 0.8,
          duration: 24 // Effect lasts 24 hours
        }
      ],
      timestamp: new Date()
    }
  ],
  crossPollinationEvents: [
    // CROSS-POLLINATION: Skills sharing between your organellas
    {
      id: 'cross_zaebee_001',
      sourceOrganella: 'logical',
      targetOrganella: 'mathematical',
      sourceSkill: 'Function Foundation',
      resultingSkill: 'Mathematical Function Mastery',
      danceSequence: [
        // First: Logical organella performs Function Foundation dance
        {
          type: 'figure8',
          intensity: 1,
          duration: 6,
          direction: 45,
          vibrationPattern: [2, 1, 2, 1, 1, 1]
        },
        // Then: Mathematical organella responds with Arithmetic dance
        {
          type: 'circle',
          intensity: 1,
          duration: 4,
          direction: 0,
          vibrationPattern: [1, 1, 2, 1]
        }
      ],
      timestamp: new Date()
    }
  ]
}

export { Challenge, examplePlayerSkillRegistry }

export type {
  SkillDomain,
  ATCGPhase,
  SkillUnlock,
  DancePattern,
  PersonalSkillRegistry,
  OrganellaSkillset,
  CompoundSkill,
  ATCGMutation,
  DanceEvent,
  ResonanceEffect,
  CrossPollinationEvent,
  OrganellaType
}
