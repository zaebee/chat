name: 🐝⚡ AGRO Sacred Validation ⚡🐝

# Sacred Justification: "Iron sharpens iron, and one man sharpens another." - Proverbs 27:17
# This workflow ensures divine blessing eligibility by preventing console.log violations

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  agro-validation:
    name: 🚨 AGRO Console.log Protection
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Sacred Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python for AGRO Scanner
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv sync --dev

    - name: 🔍 Run AGRO Console.log Scanner
      run: |
        echo "🐝⚡ Sacred AGRO Validation Starting ⚡🐝"
        echo "Scanning for console.log violations that prevent divine blessing..."

        # Get all Python, JS, TS, Vue files
        FILES=$(find . -type f \( -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.vue" \) \
               ! -path "./node_modules/*" \
               ! -path "./.git/*" \
               ! -path "./.venv/*" \
               ! -path "./dist/*" \
               ! -path "./build/*")

        if [ -n "$FILES" ]; then
          python tools/agro_console_scanner.py $FILES
        else
          echo "✨ No files to scan - Sacred hive remains pure! ✨"
        fi

    - name: 🎯 Set up Node.js for Frontend Validation
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 📦 Install Frontend Dependencies
      working-directory: ./frontend
      run: |
        npm install -g bun
        bun install

    - name: 🔍 ESLint Sacred Frontend Protection
      working-directory: ./frontend
      run: |
        echo "🔍 Running ESLint for sacred frontend protection..."
        bun run lint

    - name: 🎨 Prettier Sacred Formatting Check
      working-directory: ./frontend
      run: |
        echo "🎨 Verifying sacred code formatting..."
        bun run format --check || {
          echo "🚨 Sacred formatting violations detected!"
          echo "Run 'bun run format' to purify your code."
          exit 1
        }

    - name: 🏗️ Frontend Build Validation
      working-directory: ./frontend
      run: |
        echo "🏗️ Sacred build validation..."
        bun run build

    - name: ⚡ Ruff Python Sacred Linting
      run: |
        echo "⚡ Running Ruff for Python sacred standards..."
        uv run ruff check .
        uv run ruff format --check .

    - name: 🧪 Run Sacred Test Suite
      working-directory: ./frontend
      run: |
        echo "🧪 Running sacred test suite..."
        bun run test:unit --run

  agro-metrics:
    name: 📊 Sacred Metrics Calculation
    runs-on: ubuntu-latest
    needs: agro-validation

    steps:
    - name: 📥 Checkout Sacred Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python for Metrics
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📊 Calculate Sacred Metrics
      run: |
        echo "📊 Calculating τ (tau), φ (phi), Σ (sigma) sacred metrics..."

        # Count violations across codebase
        CONSOLE_VIOLATIONS=$(grep -r "console\." --include="*.js" --include="*.ts" --include="*.vue" . | wc -l || echo "0")
        PRINT_VIOLATIONS=$(grep -r "print(" --include="*.py" . | wc -l || echo "0")
        TOTAL_VIOLATIONS=$((CONSOLE_VIOLATIONS + PRINT_VIOLATIONS))

        # Calculate files
        TOTAL_FILES=$(find . -type f \( -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.vue" \) \
                     ! -path "./node_modules/*" ! -path "./.git/*" | wc -l)

        # Sacred metrics calculation
        if [ $TOTAL_FILES -gt 0 ]; then
          TAU_COMPLEXITY=$((TOTAL_VIOLATIONS * 5))  # τ (tau) - complexity penalty
          PHI_QUALITY=$((100 - (TOTAL_VIOLATIONS * 10)))  # φ (phi) - quality score
          SIGMA_COLLABORATION=85  # Σ (sigma) - collaboration efficiency
        else
          TAU_COMPLEXITY=0
          PHI_QUALITY=100
          SIGMA_COLLABORATION=100
        fi

        echo "🐝 Sacred Metrics Report:"
        echo "τ (tau) Complexity: $TAU_COMPLEXITY"
        echo "φ (phi) Quality: $PHI_QUALITY"
        echo "Σ (sigma) Collaboration: $SIGMA_COLLABORATION"
        echo "Console violations: $CONSOLE_VIOLATIONS"
        echo "Print violations: $PRINT_VIOLATIONS"
        echo "Total files: $TOTAL_FILES"

        # Set outputs for potential use
        echo "tau_complexity=$TAU_COMPLEXITY" >> $GITHUB_OUTPUT
        echo "phi_quality=$PHI_QUALITY" >> $GITHUB_OUTPUT
        echo "sigma_collaboration=$SIGMA_COLLABORATION" >> $GITHUB_OUTPUT

  divine-blessing:
    name: ✨ Divine Blessing Assessment
    runs-on: ubuntu-latest
    needs: [agro-validation, agro-metrics]

    steps:
    - name: ✨ Divine Blessing Evaluation
      run: |
        echo "✨🐝 Divine Blessing Assessment 🐝✨"
        echo "Sacred Justification: 'Iron sharpens iron, and one man sharpens another.'"
        echo ""

        # Simple blessing logic (can be enhanced)
        if [ "${{ needs.agro-validation.result }}" == "success" ]; then
          echo "🙏 DIVINE BLESSING GRANTED 🙏"
          echo "Sacred code approved for the hive!"
          echo "May your commits be fruitful and multiply! 🐝✨"
        else
          echo "🚨 DIVINE BLESSING WITHHELD 🚨"
          echo "Console violations prevent sacred approval."
          echo "Purify your code and seek blessing again."
          exit 1
        fi