name: "üçØ Honeypot Validation"

on:
  pull_request:
    paths:
      - 'docs/**'
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
  workflow_dispatch:

jobs:
  validate-purity:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate pure markdown in docs/
      run: |
        echo "üçØ Validating Honeypot Purity..."
        
        # For PR validation, only check changed files in docs/
        VIOLATIONS=0
        
        # Get list of changed files in docs/ for this PR
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "^docs/" || true)
          echo "üîç Checking changed files: $CHANGED_FILES"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "‚úÖ No docs/ files changed in this PR"
            exit 0
          fi
          
          # Check only changed files
          for file in $CHANGED_FILES; do
            if [ -f "$file" ]; then
              echo "üîç Validating $file"
              
              # Check for Jekyll Liquid includes
              if grep -q "{% include" "$file" 2>/dev/null; then
                echo "‚ùå Found Jekyll Liquid includes in $file"
                VIOLATIONS=$((VIOLATIONS + 1))
              fi
              
              # Check for HTML div tags with classes
              if grep -q "<div class=" "$file" 2>/dev/null; then
                echo "‚ùå Found HTML div tags with classes in $file"
                VIOLATIONS=$((VIOLATIONS + 1))
              fi
              
              # Check for script tags
              if grep -q "<script" "$file" 2>/dev/null; then
                echo "‚ùå Found script tags in $file"
                VIOLATIONS=$((VIOLATIONS + 1))
              fi
              
              # Check for style tags
              if grep -q "<style" "$file" 2>/dev/null; then
                echo "‚ùå Found style tags in $file"
                VIOLATIONS=$((VIOLATIONS + 1))
              fi
              
              # Check file extension
              if [[ "$file" =~ \.(js|ts|vue)$ ]]; then
                echo "‚ùå Found JavaScript/TypeScript file: $file"
                VIOLATIONS=$((VIOLATIONS + 1))
              fi
            fi
          done
        else
          # For push to main, check all docs/ (full validation)
          echo "üîç Full validation mode (push to main)"
          
          # Check for Jekyll Liquid includes
          if grep -r "{% include" docs/; then
            echo "‚ùå Found Jekyll Liquid includes in docs/"
            VIOLATIONS=$((VIOLATIONS + 1))
          fi
          
          # Check for HTML div tags with classes
          if grep -r "<div class=" docs/; then
            echo "‚ùå Found HTML div tags with classes in docs/"
            VIOLATIONS=$((VIOLATIONS + 1))
          fi
          
          # Check for script tags
          if grep -r "<script" docs/; then
            echo "‚ùå Found script tags in docs/"
            VIOLATIONS=$((VIOLATIONS + 1))
          fi
          
          # Check for style tags
          if grep -r "<style" docs/; then
            echo "‚ùå Found style tags in docs/"
            VIOLATIONS=$((VIOLATIONS + 1))
          fi
          
          # Check for JavaScript/TypeScript files
          if find docs/ -name "*.js" -o -name "*.ts" -o -name "*.vue" | grep -q .; then
            echo "‚ùå Found JavaScript/TypeScript files in docs/"
            VIOLATIONS=$((VIOLATIONS + 1))
          fi
        fi
        
        # Check for complex frontmatter
        echo "üîç Checking frontmatter complexity..."
        python3 << 'EOF'
        import os
        import glob
        import re
        import subprocess
        
        violations = 0
        allowed_fields = {'title', 'description', 'category'}
        
        # Get changed files for PR validation
        if os.environ.get('GITHUB_EVENT_NAME') == 'pull_request':
            try:
                result = subprocess.run(['git', 'diff', '--name-only', f'origin/{os.environ.get("GITHUB_BASE_REF", "main")}...HEAD'], 
                                      capture_output=True, text=True)
                changed_files = [f for f in result.stdout.strip().split('\n') if f.startswith('docs/') and f.endswith('.md')]
                file_list = changed_files
                print(f"Checking changed files: {file_list}")
            except:
                file_list = []
        else:
            file_list = glob.glob('docs/**/*.md', recursive=True)

        for file_path in file_list:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                if content.startswith('---'):
                    parts = content.split('---', 2)
                    if len(parts) >= 2:
                        frontmatter = parts[1].strip()
                        fields = set()
                        
                        for line in frontmatter.split('\n'):
                            if ':' in line:
                                field = line.split(':', 1)[0].strip()
                                fields.add(field)
                        
                        # Check for non-essential fields
                        extra_fields = fields - allowed_fields
                        if extra_fields:
                            print(f"‚ö†Ô∏è Complex frontmatter in {file_path}: {extra_fields}")
                            violations += 1
            
            except Exception as e:
                print(f"Error checking {file_path}: {e}")
        
        if violations > 0:
            print(f"‚ùå Found {violations} files with complex frontmatter")
            exit(1)
        EOF
        
        if [ $VIOLATIONS -gt 0 ]; then
          echo ""
          echo "üí• HONEYPOT CONTAMINATED!"
          echo "Found $VIOLATIONS types of violations in docs/"
          echo ""
          echo "üßπ To fix:"
          echo "1. Remove Jekyll Liquid includes ({% include %})"
          echo "2. Remove HTML tags with classes"
          echo "3. Remove script and style tags"
          echo "4. Move JS/TS files out of docs/"
          echo "5. Simplify frontmatter to: title, description, category only"
          echo ""
          echo "üçØ Keep the honeypot pure - let workflows add the sweetness!"
          exit 1
        else
          echo "‚úÖ Honeypot is pure! No contamination detected."
        fi
        
    - name: Validate markdown syntax
      run: |
        echo "üìù Validating markdown syntax..."
        
        # Install markdownlint
        npm install -g markdownlint-cli
        
        # Create markdownlint config for pure markdown
        cat > .markdownlint.json << 'EOF'
        {
          "MD013": false,
          "MD033": {
            "allowed_elements": ["br"]
          },
          "MD041": false
        }
        EOF
        
        # Run markdownlint on docs/
        markdownlint docs/ || echo "‚ö†Ô∏è Markdown linting warnings (non-blocking)"
        
    - name: Generate purity report
      run: |
        echo "üìä Generating Honeypot Purity Report..."
        
        python3 << 'EOF'
        import os
        import glob
        
        # Count files and sizes
        md_files = glob.glob('docs/**/*.md', recursive=True)
        total_size = sum(os.path.getsize(f) for f in md_files)
        
        print(f"üìö Total markdown files: {len(md_files)}")
        print(f"üìè Total size: {total_size / 1024:.1f} KB")
        print(f"üìÑ Average file size: {total_size / len(md_files) / 1024:.1f} KB")
        
        # Check for pure content indicators
        pure_indicators = 0
        for file_path in md_files:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Count pure markdown indicators
            if '```' in content:  # Code blocks
                pure_indicators += 1
            if '|' in content and '---' in content:  # Tables
                pure_indicators += 1
            if content.count('#') > 0:  # Headers
                pure_indicators += 1
        
        print(f"üçØ Purity score: {pure_indicators / len(md_files):.1f} indicators per file")
        print("‚úÖ Honeypot validation complete!")
        EOF