import bleach
from markdown_it import MarkdownIt
from mdit_py_plugins.front_matter import front_matter_plugin
from mdit_py_plugins.footnote import footnote_plugin
from mdit_py_plugins.tasklists import tasklists_plugin
from typing import Dict


class UnifiedMarkdownToHtmlTransformation:
    def __init__(self):
        self.md = (
            MarkdownIt(
                "gfm-like",
                {
                    "linkify": True,
                    "typographer": True,
                    "html": True,
                },
            )
            .use(front_matter_plugin)
            .use(footnote_plugin)
            .use(tasklists_plugin)
        )
        self.allowed_tags = [
            "p",
            "strong",
            "em",
            "code",
            "pre",
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6",
            "ul",
            "ol",
            "li",
            "a",
            "blockquote",
            "hr",
            "br",
            "img",
            "table",
            "thead",
            "tbody",
            "tr",
            "th",
            "td",
            "span",
            "div",
            "sup",
            "sub",
        ]
        self.allowed_attrs = {
            "*": ["class", "id"],
            "a": ["href", "title", "target", "rel"],
            "img": ["src", "alt", "title"],
        }

    def transform(
        self, markdown_content: str, html_template: str, metadata: Dict[str, str]
    ) -> str:
        # Render markdown to HTML
        html_content = self.md.render(markdown_content)

        # Sanitize the HTML content
        sanitized_html = bleach.clean(
            html_content,
            tags=self.allowed_tags,
            attributes=self.allowed_attrs,
        )

        # Populate template
        output_html = html_template
        for key, value in metadata.items():
            output_html = output_html.replace(f"{{{key}}}", value)
        output_html = output_html.replace("{REPORT_CONTENT}", sanitized_html)

        return output_html


def create_demo_html():
    # Read the markdown content
    with open("demo_article.md", "r", encoding="utf-8") as f:
        markdown_content = f.read()

    # Read the HTML template
    with open("docs/base_report_template.html", "r", encoding="utf-8") as f:
        html_template = f.read()

    # Create unified transformer instance
    transformer = UnifiedMarkdownToHtmlTransformation()

    # Define metadata for the template
    metadata = {
        "REPORT_TITLE": "The Sacred Architecture of Hive Transformation (Unified)",
        "REPORT_ABSTRACT": "A deep dive into the markdown-to-HTML transformation process using the unified (markdown-it-py) transformer.",
        "CONTEXTUAL_NOTE_CONTENT": "<strong>Sacred Context:</strong> This report demonstrates the capabilities of the new unified markdown transformer, showcasing its feature set and security enhancements.",
        "SIGNATURE_CONTENT": "<strong>Generated by:</strong> bee.Jules (Unified Transformer)<br>Sacred Team Analysis & Wisdom Synthesis",
    }

    # Transform the content
    final_html = transformer.transform(markdown_content, html_template, metadata)

    # Save the result
    with open("demo_output_unified.html", "w", encoding="utf-8") as f:
        f.write(final_html)

    print(
        "âœ¨ Sacred transformation complete with the unified transformer! Check demo_output_unified.html"
    )
    return final_html


if __name__ == "__main__":
    create_demo_html()
